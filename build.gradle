plugins {
    id 'java'
    id 'org.springframework.boot' version '3.2.1'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.flywaydb.flyway' version '10.4.1'
    id 'jacoco'
    id 'com.github.spotbugs' version '6.0.7'
    id 'pmd'
    id 'checkstyle'
    id 'org.sonarqube' version '4.4.1.3373'
    id 'org.owasp.dependencycheck' version '9.0.8'
}

group = 'com.opencsms'
version = '0.1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
    targetCompatibility = '17'
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    maven { url 'https://repo.spring.io/milestone' }
}

ext {
    set('springCloudVersion', "2023.0.0")
    set('testcontainersVersion', "1.19.3")
    set('openApiVersion', "2.3.0")
    set('jjwtVersion', "0.12.3")
    set('influxDbVersion', "7.0.0")
}

dependencies {
    // Spring Boot Starters
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    implementation 'org.springframework.boot:spring-boot-starter-websocket'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-redis-reactive'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // GraphQL
    implementation 'org.springframework.boot:spring-boot-starter-graphql'
    implementation 'com.graphql-java-kickstart:graphql-java-tools:13.1.1'
    
    // Database
    implementation 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    implementation 'org.flywaydb:flyway-database-postgresql'
    implementation 'com.influxdb:influxdb-client-java:${influxDbVersion}'
    
    // JSON Processing
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
    implementation 'com.fasterxml.jackson.module:jackson-module-parameter-names'
    
    // Security & JWT
    implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
    implementation "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
    
    // OpenAPI Documentation
    implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:${openApiVersion}"
    
    // Utilities
    implementation 'org.apache.commons:commons-lang3'
    implementation 'org.apache.commons:commons-collections4:4.4'
    implementation 'com.google.guava:guava:32.1.3-jre'
    
    // Development
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    
    // Testing
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation 'org.springframework.graphql:spring-graphql-test'
    testImplementation 'io.projectreactor:reactor-test'
    testImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
    testImplementation "org.testcontainers:postgresql:${testcontainersVersion}"
    testImplementation "org.testcontainers:influxdb:${testcontainersVersion}"
    testImplementation 'com.h2database:h2'
    testImplementation 'org.mockito:mockito-core'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.awaitility:awaitility'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        mavenBom "org.testcontainers:testcontainers-bom:${testcontainersVersion}"
    }
}

// Java compiler options
tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs.addAll([
        '-parameters',
        '-Xlint:all',
        '-Xlint:-processing'
    ])
}

// Testing configuration
test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
    systemProperties = [
        'spring.profiles.active': 'test'
    ]
}

// Integration tests
sourceSets {
    integrationTest {
        java.srcDir 'src/integrationTest/java'
        resources.srcDir 'src/integrationTest/resources'
        compileClasspath += main.output + test.output
        runtimeClasspath += main.output + test.output
    }
}

configurations {
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

task integrationTest(type: Test) {
    description = 'Runs integration tests'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    shouldRunAfter test
    
    testLogging {
        events "passed", "skipped", "failed"
    }
}

check.dependsOn integrationTest

// Code coverage
jacoco {
    toolVersion = "0.8.11"
}

jacocoTestReport {
    dependsOn test
    reports {
        xml.required = true
        html.required = true
    }
    executionData test, integrationTest
    
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                '**/config/**',
                '**/dto/**',
                '**/entity/**',
                '**/*Application*'
            ])
        }))
    }
}

test.finalizedBy jacocoTestReport

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    violationRules {
        rule {
            limit {
                counter = 'INSTRUCTION'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }
        }
        rule {
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.75
            }
        }
    }
}

// Code quality - SpotBugs
spotbugs {
    ignoreFailures = false
    effort = 'max'
    reportLevel = 'medium'
    excludeFilter = file('config/spotbugs/exclude.xml')
}

spotbugsMain {
    reports {
        html {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.html")
        }
        xml {
            required = true
            outputLocation = file("$buildDir/reports/spotbugs/main/spotbugs.xml")
        }
    }
}

// Code quality - PMD
pmd {
    ignoreFailures = false
    ruleSetFiles = files('config/pmd/ruleset.xml')
    ruleSets = []
}

// Code quality - Checkstyle
checkstyle {
    toolVersion = '10.12.7'
    configFile = file('config/checkstyle/checkstyle.xml')
    ignoreFailures = false
}

// SonarQube configuration
sonarqube {
    properties {
        property 'sonar.projectName', 'Open-CSMS'
        property 'sonar.projectKey', 'open-csms'
        property 'sonar.host.url', 'http://localhost:9000'
        property 'sonar.language', 'java'
        property 'sonar.sourceEncoding', 'UTF-8'
        property 'sonar.sources', 'src/main/java'
        property 'sonar.tests', 'src/test/java,src/integrationTest/java'
        property 'sonar.java.binaries', 'build/classes/java/main'
        property 'sonar.java.test.binaries', 'build/classes/java/test'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.java.spotbugs.reportPaths', 'build/reports/spotbugs/main/spotbugs.xml'
        property 'sonar.java.pmd.reportPaths', 'build/reports/pmd/main.xml'
        property 'sonar.java.checkstyle.reportPaths', 'build/reports/checkstyle/main.xml'
    }
}

// Gradle wrapper
wrapper {
    gradleVersion = '8.5'
    distributionType = Wrapper.DistributionType.BIN
}

// Custom tasks
task loadTestData {
    description = 'Load test data for development'
    group = 'application'
    doLast {
        println 'Loading test data...'
        // Implementation will be added later
    }
}

task generateEntities {
    description = 'Generate JPA entities from schema'
    group = 'build'
    doLast {
        println 'Generating entities...'
        // Implementation will be added later
    }
}

// Build info
// OWASP Dependency Check
dependencyCheck {
    format = 'ALL'
    suppressionFile = 'config/owasp/suppressions.xml'
    failBuildOnCVSS = 7
    skipConfigurations = ['developmentOnly', 'testImplementation', 'integrationTestImplementation']
    
    analyzers {
        assemblyEnabled = false
        nuspecEnabled = false
        nugetconfEnabled = false
    }
    
    nvd {
        apiKey = System.getenv('NVD_API_KEY') ?: project.findProperty('nvdApiKey')
        delay = 5000  // 5 seconds delay between requests
    }
}

// Custom quality check task
task qualityCheck {
    description = 'Run all quality checks'
    group = 'verification'
    dependsOn check, spotbugsMain, pmdMain, checkstyleMain, dependencyCheckAnalyze
}

// Test report aggregation
task testReport(type: TestReport) {
    description = 'Generate aggregate test report'
    group = 'reporting'
    destinationDir = file("$buildDir/reports/allTests")
    reportOn test, integrationTest
}

springBoot {
    buildInfo {
        properties {
            additional = [
                'description': 'Open Source Charging Station Management System',
                'website': 'https://github.com/open-csms/open-csms'
            ]
        }
    }
}