<?xml version="1.0"?>
<ruleset name="Open-CSMS PMD Rules"
         xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 
         https://pmd.sourceforge.io/ruleset_2_0_0.xsd">

    <description>
        PMD rules for Open-CSMS project focusing on code quality, security, and maintainability
    </description>

    <!-- Best Practices -->
    <rule ref="category/java/bestpractices.xml">
        <!-- Allow JUnit assertions without messages for simple tests -->
        <exclude name="JUnitAssertionsShouldIncludeMessage"/>
        <!-- Allow method parameters to be reassigned in some cases -->
        <exclude name="MethodArgumentCouldBeFinal"/>
        <!-- Allow constants interface pattern for Spring profiles -->
        <exclude name="ConstantsInInterface"/>
        <!-- Allow system out for main methods and utilities -->
        <exclude name="SystemPrintln"/>
    </rule>

    <!-- Code Style -->
    <rule ref="category/java/codestyle.xml">
        <!-- Skip some rules that conflict with modern Java practices -->
        <exclude name="OnlyOneReturn"/>
        <exclude name="AtLeastOneConstructor"/>
        <exclude name="CallSuperInConstructor"/>
        <exclude name="CommentDefaultAccessModifier"/>
        <exclude name="DefaultPackage"/>
        <exclude name="LocalVariableCouldBeFinal"/>
        <exclude name="LongVariable"/>
        <exclude name="ShortVariable"/>
        <exclude name="TooManyStaticImports"/>
    </rule>

    <!-- Custom line length rule -->
    <rule ref="category/java/codestyle.xml/LinguisticNaming"/>
    
    <!-- Design -->
    <rule ref="category/java/design.xml">
        <!-- Allow more than 7 parameters for certain patterns -->
        <exclude name="ExcessiveParameterList"/>
        <!-- Allow data classes (DTOs, entities) -->
        <exclude name="DataClass"/>
        <!-- Skip law of demeter for builder patterns -->
        <exclude name="LawOfDemeter"/>
    </rule>

    <!-- Custom design rules -->
    <rule ref="category/java/design.xml/CyclomaticComplexity">
        <properties>
            <property name="methodReportLevel" value="15"/>
            <property name="classReportLevel" value="80"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/NPathComplexity">
        <properties>
            <property name="reportLevel" value="200"/>
        </properties>
    </rule>

    <rule ref="category/java/design.xml/TooManyFields">
        <properties>
            <property name="maxfields" value="20"/>
        </properties>
    </rule>

    <!-- Documentation -->
    <rule ref="category/java/documentation.xml">
        <!-- Don't require comments for every field -->
        <exclude name="CommentRequired"/>
        <!-- Allow missing JavaDoc for simple getters/setters -->
        <exclude name="CommentSize"/>
    </rule>

    <!-- Error Prone -->
    <rule ref="category/java/errorprone.xml">
        <!-- Allow null assignments in some cases -->
        <exclude name="NullAssignment"/>
        <!-- Allow empty catch blocks with comments -->
        <exclude name="EmptyCatchBlock"/>
        <!-- Skip DataflowAnomalyAnalysis as it can be too strict -->
        <exclude name="DataflowAnomalyAnalysis"/>
    </rule>

    <!-- Multithreading -->
    <rule ref="category/java/multithreading.xml"/>

    <!-- Performance -->
    <rule ref="category/java/performance.xml">
        <!-- Allow string concatenation in logging -->
        <exclude name="ConsecutiveLiteralAppends"/>
        <!-- Allow instantiation in loops for specific cases -->
        <exclude name="AvoidInstantiatingObjectsInLoops"/>
    </rule>

    <!-- Security -->
    <rule ref="category/java/security.xml"/>

    <!-- Custom rules for Spring Boot -->
    <rule name="AvoidHardcodedSecrets"
          language="java"
          message="Avoid hardcoded secrets, use configuration properties instead"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Detects potential hardcoded secrets in Spring Boot applications
        </description>
        <priority>2</priority>
        <properties>
            <property name="xpath">
                <value>
                //VariableDeclarator[
                    (contains(@Image, 'password') or 
                     contains(@Image, 'secret') or 
                     contains(@Image, 'key') or 
                     contains(@Image, 'token'))
                    and
                    ../VariableInitializer/Expression/PrimaryExpression/PrimaryPrefix/Literal
                ]
                </value>
            </property>
        </properties>
    </rule>

    <rule name="SpringSecurityConfigurationCheck"
          language="java"
          message="Security configuration should be properly configured"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Checks for proper Spring Security configuration
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                //ClassOrInterfaceDeclaration[
                    .//Annotation[
                        .//Name[@Image='EnableWebSecurity']
                    ]
                ]//MethodDeclaration[
                    @Name='configure' and
                    not(.//MethodCall/PrimaryExpression[
                        ends-with(@Image, 'authorizeRequests') or
                        ends-with(@Image, 'authorizeHttpRequests')
                    ])
                ]
                </value>
            </property>
        </properties>
    </rule>

    <!-- OCPP/OCPI specific rules -->
    <rule name="OCPPMessageValidation"
          language="java"
          message="OCPP messages should be properly validated"
          class="net.sourceforge.pmd.lang.rule.XPathRule">
        <description>
            Ensures OCPP message handling includes validation
        </description>
        <priority>3</priority>
        <properties>
            <property name="xpath">
                <value>
                //ClassOrInterfaceDeclaration[contains(@Image, 'OCPP')]//
                MethodDeclaration[contains(@Name, 'handle') or contains(@Name, 'process')]
                [not(.//MethodCall[contains(@Image, 'validate')])]
                </value>
            </property>
        </properties>
    </rule>

    <!-- Exclude generated code -->
    <exclude-pattern>.*/generated/.*</exclude-pattern>
    <exclude-pattern>.*/target/.*</exclude-pattern>
    <exclude-pattern>.*/build/.*</exclude-pattern>
    
    <!-- Test exclusions -->
    <exclude-pattern>.*/src/test/.*</exclude-pattern>
    <exclude-pattern>.*/src/integrationTest/.*</exclude-pattern>

</ruleset>