<?xml version="1.0" encoding="UTF-8"?>
<FindBugsFilter
    xmlns="https://github.com/spotbugs/filter/3.0.0"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="https://github.com/spotbugs/filter/3.0.0 
    https://raw.githubusercontent.com/spotbugs/spotbugs/3.1.0/spotbugs/etc/findbugsfilter.xsd">

    <!-- Exclude test code -->
    <Match>
        <Source name="~.*Test\.java"/>
    </Match>
    
    <Match>
        <Source name="~.*TestCase\.java"/>
    </Match>
    
    <Match>
        <Source name="~.*Tests\.java"/>
    </Match>

    <!-- Exclude generated code -->
    <Match>
        <Source name="~.*generated.*"/>
    </Match>

    <!-- Spring Boot specific exclusions -->
    
    <!-- Allow Spring Boot application main method -->
    <Match>
        <Class name="~.*Application"/>
        <Method name="main"/>
        <Bug pattern="DM_EXIT"/>
    </Match>

    <!-- Allow @Autowired on fields for Spring dependency injection -->
    <Match>
        <Bug pattern="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
        <Field name="~.*" type="~.*" />
        <Or>
            <HasAnnotation name="org.springframework.beans.factory.annotation.Autowired"/>
            <HasAnnotation name="javax.inject.Inject"/>
            <HasAnnotation name="jakarta.inject.Inject"/>
        </Or>
    </Match>

    <!-- Allow serialVersionUID warning for entities and DTOs -->
    <Match>
        <Bug pattern="SE_NO_SERIALVERSIONID"/>
        <Or>
            <Class name="~.*Entity"/>
            <Class name="~.*DTO"/>
            <Class name="~.*Request"/>
            <Class name="~.*Response"/>
        </Or>
    </Match>

    <!-- JPA/Hibernate specific exclusions -->
    
    <!-- Allow empty default constructors for JPA entities -->
    <Match>
        <Bug pattern="UWF_UNWRITTEN_FIELD"/>
        <Or>
            <HasAnnotation name="javax.persistence.Entity"/>
            <HasAnnotation name="jakarta.persistence.Entity"/>
            <HasAnnotation name="javax.persistence.Embeddable"/>
            <HasAnnotation name="jakarta.persistence.Embeddable"/>
        </Or>
    </Match>

    <!-- Allow fields that are set by JPA -->
    <Match>
        <Bug pattern="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
        <Or>
            <HasAnnotation name="javax.persistence.Id"/>
            <HasAnnotation name="jakarta.persistence.Id"/>
            <HasAnnotation name="javax.persistence.GeneratedValue"/>
            <HasAnnotation name="jakarta.persistence.GeneratedValue"/>
            <HasAnnotation name="javax.persistence.OneToMany"/>
            <HasAnnotation name="jakarta.persistence.OneToMany"/>
            <HasAnnotation name="javax.persistence.ManyToOne"/>
            <HasAnnotation name="jakarta.persistence.ManyToOne"/>
            <HasAnnotation name="javax.persistence.ManyToMany"/>
            <HasAnnotation name="jakarta.persistence.ManyToMany"/>
        </Or>
    </Match>

    <!-- Configuration classes -->
    
    <!-- Allow Spring configuration classes to have many dependencies -->
    <Match>
        <Bug pattern="CD_CIRCULAR_DEPENDENCY"/>
        <HasAnnotation name="org.springframework.context.annotation.Configuration"/>
    </Match>

    <!-- Security exclusions -->
    
    <!-- Allow password fields (they will be encrypted) -->
    <Match>
        <Bug pattern="HRS_REQUEST_PARAMETER_TO_HTTP_HEADER"/>
        <Field name="password"/>
    </Match>

    <!-- OCPP/OCPI specific exclusions -->
    
    <!-- Allow complex OCPP message handling -->
    <Match>
        <Class name="~.*OCPP.*"/>
        <Bug pattern="CC_CYCLOMATIC_COMPLEXITY"/>
    </Match>
    
    <Match>
        <Class name="~.*OCPI.*"/>
        <Bug pattern="CC_CYCLOMATIC_COMPLEXITY"/>
    </Match>

    <!-- Allow mutable static fields for constants -->
    <Match>
        <Bug pattern="MS_MUTABLE_ARRAY"/>
        <Field name="~.*CONSTANTS.*"/>
    </Match>

    <!-- Lombok specific exclusions -->
    
    <!-- Allow equals/hashCode generated by Lombok -->
    <Match>
        <Bug pattern="HE_EQUALS_USE_HASHCODE"/>
        <HasAnnotation name="lombok.EqualsAndHashCode"/>
    </Match>
    
    <Match>
        <Bug pattern="EQ_DOESNT_OVERRIDE_EQUALS"/>
        <HasAnnotation name="lombok.EqualsAndHashCode"/>
    </Match>

    <!-- Allow builder patterns -->
    <Match>
        <Bug pattern="UWF_FIELD_NOT_INITIALIZED_IN_CONSTRUCTOR"/>
        <HasAnnotation name="lombok.Builder"/>
    </Match>

    <!-- WebSocket specific exclusions -->
    
    <!-- Allow WebSocket session management -->
    <Match>
        <Class name="~.*WebSocket.*"/>
        <Bug pattern="ST_WRITE_TO_STATIC_FROM_INSTANCE_METHOD"/>
    </Match>

    <!-- Multithreading exclusions -->
    
    <!-- Allow concurrent collections in service classes -->
    <Match>
        <Bug pattern="JLM_JSR166_UTILCONCURRENT_MONITORENTER"/>
        <Class name="~.*Service"/>
    </Match>

    <!-- Test specific exclusions -->
    
    <!-- Allow hardcoded strings in tests -->
    <Match>
        <Source name="~.*[Tt]est.*\.java"/>
        <Bug pattern="DM_STRING_CTOR"/>
    </Match>
    
    <!-- Allow reflection in tests -->
    <Match>
        <Source name="~.*[Tt]est.*\.java"/>
        <Bug pattern="REC_CATCH_EXCEPTION"/>
    </Match>

    <!-- Performance exclusions for specific patterns -->
    
    <!-- Allow string concatenation in logging with guards -->
    <Match>
        <Bug pattern="SLF4J_FORMAT_SHOULD_BE_CONST"/>
        <Method name="~log.*"/>
    </Match>

    <!-- Database related exclusions -->
    
    <!-- Allow SQL injection warnings for dynamic queries (will be reviewed manually) -->
    <Match>
        <Bug pattern="SQL_NONCONSTANT_STRING_PASSED_TO_EXECUTE"/>
        <Class name="~.*Repository.*"/>
    </Match>

</FindBugsFilter>