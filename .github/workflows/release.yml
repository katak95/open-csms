name: Release

on:
  push:
    tags:
      - 'v*.*.*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  JAVA_VERSION: '17'

jobs:
  validate-tag:
    name: Validate Release Tag
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    outputs:
      version: ${{ steps.extract.outputs.version }}
      is-prerelease: ${{ steps.extract.outputs.is-prerelease }}
    
    steps:
    - name: Extract version from tag
      id: extract
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        VERSION=${TAG#v}
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        
        # Check if it's a pre-release (contains alpha, beta, rc)
        if [[ $VERSION =~ -(alpha|beta|rc) ]]; then
          echo "is-prerelease=true" >> $GITHUB_OUTPUT
        else
          echo "is-prerelease=false" >> $GITHUB_OUTPUT
        fi
        
        # Validate semantic versioning
        if [[ ! $VERSION =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9]+(\.[0-9]+)?)?$ ]]; then
          echo "Invalid version format: $VERSION"
          exit 1
        fi

  build-release:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: validate-tag
    if: always() && (needs.validate-tag.result == 'success' || github.event_name == 'workflow_dispatch')
    
    outputs:
      version: ${{ steps.version.outputs.version }}
      artifacts-path: ${{ steps.artifacts.outputs.path }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Set version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION=${{ github.event.inputs.version }}
          VERSION=${VERSION#v}  # Remove 'v' prefix if present
        else
          VERSION=${{ needs.validate-tag.outputs.version }}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build application
      run: ./gradlew build -Pversion=${{ env.VERSION }}

    - name: Generate changelog
      id: changelog
      run: |
        # Generate changelog from git history
        if [ "${{ github.event_name }}" = "push" ]; then
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD~1 2>/dev/null || echo "")
          if [ -n "$PREVIOUS_TAG" ]; then
            CHANGELOG=$(git log --pretty=format:"- %s" $PREVIOUS_TAG..HEAD | grep -v "^- Merge")
          else
            CHANGELOG=$(git log --pretty=format:"- %s" | head -20)
          fi
        else
          CHANGELOG="Manual release v${{ env.VERSION }}"
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create release artifacts
      id: artifacts
      run: |
        mkdir -p release-artifacts
        
        # Copy main JAR
        cp build/libs/open-csms-*.jar release-artifacts/open-csms-${{ env.VERSION }}.jar
        
        # Generate checksums
        cd release-artifacts
        sha256sum *.jar > checksums.txt
        
        # Create deployment package
        cd ..
        tar -czf release-artifacts/open-csms-${{ env.VERSION }}-deployment.tar.gz \
          docker/ \
          config/ \
          sql/ \
          README.md \
          CHANGELOG.md
        
        cd release-artifacts
        sha256sum *.tar.gz >> checksums.txt
        
        echo "path=release-artifacts" >> $GITHUB_OUTPUT

    - name: Upload release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts-${{ env.VERSION }}
        path: release-artifacts/
        retention-days: 90

    - name: Build and export Docker image
      run: |
        docker build -f docker/Dockerfile -t open-csms:${{ env.VERSION }} .
        docker save open-csms:${{ env.VERSION }} | gzip > release-artifacts/open-csms-${{ env.VERSION }}-docker.tar.gz
        cd release-artifacts
        sha256sum *.tar.gz > checksums.txt

  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-release
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    
    permissions:
      contents: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts-${{ needs.build-release.outputs.version }}
        path: release-artifacts/

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ needs.build-release.outputs.version }}
        name: Open-CSMS v${{ needs.build-release.outputs.version }}
        body: |
          # Open-CSMS v${{ needs.build-release.outputs.version }}
          
          ## What's Changed
          ${{ needs.build-release.outputs.changelog }}
          
          ## Installation
          
          ### Docker (Recommended)
          ```bash
          # Download and extract deployment package
          wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.build-release.outputs.version }}/open-csms-${{ needs.build-release.outputs.version }}-deployment.tar.gz
          tar -xzf open-csms-${{ needs.build-release.outputs.version }}-deployment.tar.gz
          
          # Or use Docker image directly
          docker run -d --name open-csms \
            -p 8080:8080 \
            -e SPRING_PROFILES_ACTIVE=production \
            ghcr.io/${{ github.repository }}:${{ needs.build-release.outputs.version }}
          ```
          
          ### Java Archive
          ```bash
          # Download JAR file
          wget https://github.com/${{ github.repository }}/releases/download/v${{ needs.build-release.outputs.version }}/open-csms-${{ needs.build-release.outputs.version }}.jar
          
          # Run with Java 17+
          java -jar open-csms-${{ needs.build-release.outputs.version }}.jar
          ```
          
          ## Checksums
          All artifacts are signed with SHA-256 checksums. Download `checksums.txt` to verify integrity.
          
          ## Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}/wiki/Installation)
          - [Configuration Reference](https://github.com/${{ github.repository }}/wiki/Configuration)
          - [API Documentation](https://github.com/${{ github.repository }}/wiki/API)
          
          ---
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/...v${{ needs.build-release.outputs.version }}
        
        files: |
          release-artifacts/*
        
        prerelease: ${{ (github.event_name == 'workflow_dispatch' && github.event.inputs.prerelease == 'true') || (github.event_name == 'push' && needs.validate-tag.outputs.is-prerelease == 'true') }}
        
        generate_release_notes: false
        draft: false

  publish-docker:
    name: Publish Docker Images
    runs-on: ubuntu-latest
    needs: build-release
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}
        tags: |
          type=semver,pattern={{version}},value=v${{ needs.build-release.outputs.version }}
          type=semver,pattern={{major}}.{{minor}},value=v${{ needs.build-release.outputs.version }}
          type=semver,pattern={{major}},value=v${{ needs.build-release.outputs.version }}
          type=raw,value=latest,enable=${{ !contains(needs.build-release.outputs.version, '-') }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ needs.build-release.outputs.version }}
          BUILD_DATE=${{ github.event.head_commit.timestamp }}
          VCS_REF=${{ github.sha }}

  update-helm-chart:
    name: Update Helm Chart
    runs-on: ubuntu-latest
    needs: [build-release, publish-docker]
    if: github.repository_owner == 'opencsms' # Only for main repository
    
    steps:
    - name: Checkout helm-charts repository
      uses: actions/checkout@v4
      with:
        repository: opencsms/helm-charts
        token: ${{ secrets.HELM_CHARTS_TOKEN }}
        path: helm-charts

    - name: Update chart version
      run: |
        cd helm-charts/charts/open-csms
        
        # Update Chart.yaml
        sed -i "s/version: .*/version: ${{ needs.build-release.outputs.version }}/" Chart.yaml
        sed -i "s/appVersion: .*/appVersion: ${{ needs.build-release.outputs.version }}/" Chart.yaml
        
        # Update values.yaml
        sed -i "s/tag: .*/tag: ${{ needs.build-release.outputs.version }}/" values.yaml

    - name: Commit and push changes
      run: |
        cd helm-charts
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git add .
        git commit -m "Update Open-CSMS to v${{ needs.build-release.outputs.version }}"
        git push

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [create-github-release, publish-docker]
    if: always()
    
    steps:
    - name: Notify success
      if: needs.create-github-release.result == 'success' && needs.publish-docker.result == 'success'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
      run: |
        # Slack notification
        if [ -n "$SLACK_WEBHOOK_URL" ]; then
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"text\":\"🚀 Open-CSMS v${{ needs.build-release.outputs.version }} has been released!\n\nDownload: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build-release.outputs.version }}\"}" \
          $SLACK_WEBHOOK_URL
        fi
        
        # Discord notification
        if [ -n "$DISCORD_WEBHOOK_URL" ]; then
          curl -X POST -H 'Content-type: application/json' \
          --data "{\"content\":\"🚀 **Open-CSMS v${{ needs.build-release.outputs.version }}** has been released!\n\n📥 Download: https://github.com/${{ github.repository }}/releases/tag/v${{ needs.build-release.outputs.version }}\"}" \
          $DISCORD_WEBHOOK_URL
        fi

    - name: Notify failure
      if: needs.create-github-release.result == 'failure' || needs.publish-docker.result == 'failure'
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"🚨 Failed to release Open-CSMS v${{ needs.build-release.outputs.version }}\"}" \
        $SLACK_WEBHOOK_URL
      if: env.SLACK_WEBHOOK_URL != ''