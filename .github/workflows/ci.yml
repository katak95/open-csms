name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run every day at 2 AM UTC to catch dependency vulnerabilities
    - cron: '0 2 * * *'

env:
  JAVA_VERSION: '17'
  GRADLE_OPTS: -Dorg.gradle.daemon=false

jobs:
  test:
    name: Tests & Quality Checks
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
          
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
          
      influxdb:
        image: influxdb:2.7-alpine
        env:
          DOCKER_INFLUXDB_INIT_MODE: setup
          DOCKER_INFLUXDB_INIT_USERNAME: admin
          DOCKER_INFLUXDB_INIT_PASSWORD: admin_password
          DOCKER_INFLUXDB_INIT_ORG: test
          DOCKER_INFLUXDB_INIT_BUCKET: test
          DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: test-token
        ports:
          - 8086:8086

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better analysis

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Cache SonarCloud packages
      uses: actions/cache@v3
      with:
        path: ~/.sonar/cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Validate Gradle wrapper
      run: gradle wrapper --validate

    - name: Run tests
      run: ./gradlew test integrationTest
      env:
        SPRING_PROFILES_ACTIVE: test
        DATABASE_URL: jdbc:postgresql://localhost:5432/test_db
        DATABASE_USERNAME: test_user
        DATABASE_PASSWORD: test_password
        REDIS_URL: redis://localhost:6379
        INFLUXDB_URL: http://localhost:8086
        INFLUXDB_ORG: test
        INFLUXDB_BUCKET: test
        INFLUXDB_TOKEN: test-token

    - name: Generate test report
      run: ./gradlew testReport
      if: always()

    - name: Run code quality checks
      run: ./gradlew check spotbugsMain pmdMain checkstyleMain
      env:
        SPRING_PROFILES_ACTIVE: test

    - name: Run SonarQube analysis
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      run: ./gradlew sonar
      if: env.SONAR_TOKEN != ''

    - name: Publish test results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          **/build/test-results/**/*.xml
          **/build/test-results/**/*.json

    - name: Upload test reports
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-reports
        path: |
          **/build/reports/
          **/build/test-results/
        retention-days: 30

    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      if: always()
      with:
        file: ./build/reports/jacoco/test/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Run OWASP Dependency Check
      run: ./gradlew dependencyCheckAnalyze
      
    - name: Upload OWASP report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: owasp-report
        path: build/reports/dependency-check-report.html
        retention-days: 30

    - name: Run Snyk Security Scan
      uses: snyk/actions/gradle@master
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
      with:
        args: --severity-threshold=high
      continue-on-error: true
      if: env.SNYK_TOKEN != ''

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'

    outputs:
      version: ${{ steps.version.outputs.version }}
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'

    - name: Setup Gradle
      uses: gradle/actions/setup-gradle@v3

    - name: Generate version
      id: version
      run: |
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          VERSION=$(date +%Y.%m.%d)-${GITHUB_SHA::8}
        else
          VERSION=dev-${GITHUB_SHA::8}
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Build application
      run: ./gradlew build -x test
      env:
        VERSION: ${{ env.VERSION }}

    - name: Build Docker image
      run: |
        docker build -f docker/Dockerfile -t open-csms:${{ env.VERSION }} .
        docker tag open-csms:${{ env.VERSION }} open-csms:latest

    - name: Save Docker image
      run: docker save open-csms:${{ env.VERSION }} | gzip > open-csms-${{ env.VERSION }}.tar.gz

    - name: Upload Docker image artifact
      uses: actions/upload-artifact@v3
      with:
        name: docker-image-${{ env.VERSION }}
        path: open-csms-${{ env.VERSION }}.tar.gz
        retention-days: 30

  notification:
    name: Notifications
    runs-on: ubuntu-latest
    needs: [test, security-scan, build]
    if: always() && (needs.test.result == 'failure' || needs.security-scan.result == 'failure' || needs.build.result == 'failure')
    
    steps:
    - name: Notify on failure
      if: env.SLACK_WEBHOOK_URL != ''
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      run: |
        curl -X POST -H 'Content-type: application/json' \
        --data "{\"text\":\"ðŸš¨ CI Pipeline failed for ${{ github.repository }} - Branch: ${{ github.ref_name }} - Commit: ${{ github.sha }}\"}" \
        $SLACK_WEBHOOK_URL